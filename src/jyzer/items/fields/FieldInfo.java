/*
 * JYzer - A Java Bytecode Analyzer.
 * Copyright (C) 2005 Legendi Richard Oliver
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package jyzer.items.fields;

import java.io.DataInput;
import java.io.IOException;

import jyzer.items.accessflags.AccessFlags;
import jyzer.items.attributes.Attributes;
import jyzer.items.attributes.types.AttributeInfo;
import jyzer.items.ConstantPool;
import jyzer.items.factories.AttributeFactory;
import jyzer.items.exceptions.CorruptedClassfileException;

/**
 * <p>This class represents the field structure of a classfile, and all the rest.
 *
 * <p>Contains the following information:
 * <ul>
 * <li> Access flags<br>
 * <li> name_index <br>
 * 		Must be a valid index into the <code>constant_pool</code> table. The entry at that index
 * 		must be a <code>CONSTANT_Utf8_info</code> structure, which must represent a valid unqualified name
 * 		denoting a field.<br>
 * <li> descriptor_index <br>
 * 		Must be a valid index into the <code>constant_pool</code> table. The entry at that index
 * 		must be a <code>CONSTANT_Utf8_info</code> structure, which must represent a valid field descriptor.<br>
 * <li> Attributes
 * </ul></p>
 *
 * <hr>
 *
 * <b>About the field descriptors:</b><br>
 * A <I>field descriptor</I>
 * represents the type of a class, instance, or local variable. It is a series of
 * characters generated by the grammar:
 * <P>&nbsp; &nbsp; &nbsp; &nbsp;<I>FieldDescriptor:</I><BR>
 * <BLOCKQUOTE><I>FieldType</I>
 * <P></P></BLOCKQUOTE><A name=23540></A>
 * <P><A name=23546></A>&nbsp; &nbsp; &nbsp; &nbsp;<I>ComponentType:</I><BR>
 * <BLOCKQUOTE><I>FieldType</I>
 *   <P></P></BLOCKQUOTE>
 * <P>&nbsp; &nbsp; &nbsp; &nbsp;<I>FieldType:</I><BR>
 * <BLOCKQUOTE><I>BaseType</I>
 *   <P><I>ObjectType</I>
 *   <P><I>ArrayType</I>
 *   <P></P></BLOCKQUOTE>
 * <P>&nbsp; &nbsp; &nbsp; &nbsp;<I>BaseType:</I><BR>
 * <BLOCKQUOTE>B
 *   <P><A name=13986></A>C
 *   <P><A name=13987></A>D
 *   <P><A name=13988></A>F
 *   <P><A name=13989></A>I
 *   <P><A name=13990></A>J
 *   <P><A name=13991></A>S
 *   <P><A name=13992></A>Z
 *   <P><A name=14125></A>
 *   <P></P></BLOCKQUOTE>&nbsp; &nbsp; &nbsp;
 * &nbsp;<I>ObjectType:</I><BR>
 * <BLOCKQUOTE>L &lt;classname&gt; ;
 *   <P></P></BLOCKQUOTE>&nbsp; &nbsp; &nbsp;
 * &nbsp;<I>ArrayType:</I><BR>
 * <BLOCKQUOTE>[ <I>ComponentType</I>
 *   <P></P></BLOCKQUOTE>The characters of
 * <I>BaseType</I>, the L and ; of <I>ObjectType</I>, and the [ of <I>ArrayType</I>
 * are all ASCII characters. The &lt;classname&gt; represents a fully qualified
 * class or interface name. For historical reasons it is encoded in internal form
 *
 * <P>
 * <TABLE border=1>
 *   <TBODY>
 *   <TR>
 *     <TD><I>BaseType</I><STRONG> Character</STRONG>
 *     <TD><STRONG>Type</STRONG>
 *     <TD><STRONG>Interpretation</STRONG>
 *   <TR>
 *     <TD>B
 *     <TD><CODE>byte</CODE>
 *     <TD>signed byte
 *   <TR>
 *     <TD>C
 *     <TD><CODE>char</CODE>
 *     <TD>Unicode character
 *   <TR>
 *     <TD>D
 *     <TD><CODE>double</CODE>
 *     <TD>double-precision floating-point value
 *   <TR>
 *     <TD>F
 *     <TD><CODE>float</CODE>
 *     <TD>single-precision floating-point value
 *   <TR>
 *     <TD>I
 *     <TD><CODE>int</CODE>
 *     <TD>integer
 *   <TR>
 *     <TD>J
 *     <TD><CODE>long</CODE>
 *     <TD>long integer
 *   <TR>
 *     <TD>L&lt;classname&gt;;
 *     <TD><CODE>reference</CODE>
 *     <TD>an instance of class <CODE>&lt;classname&gt;</CODE>
 *   <TR>
 *     <TD>S
 *     <TD><CODE>short</CODE>
 *     <TD>signed short
 *   <TR>
 *     <TD>Z
 *     <TD><CODE>boolean</CODE>
 *     <TD><CODE>true</CODE> or <CODE>false</CODE>
 *   <TR>
 *     <TD><STRONG>[ </STRONG>
 *     <TD><CODE>reference</CODE>
 *     <TD>one array dimension </TR></TBODY></TABLE><BR><BR>
 * <P>
 * <P>For example, the descriptor of an instance variable of type
 * <CODE>int</CODE> is simply I. The descriptor of an instance variable of type
 * <CODE>Object</CODE> is Ljava/lang/Object;. Note that the internal form of the
 * fully qualified name for class <CODE>Object</CODE> is used. The descriptor of an
 * instance variable that is a multidimensional <CODE>double</CODE> array,
 * <P><PRE>&nbsp;&nbsp;&nbsp;&nbsp;<CODE>double d[][][];
 * </CODE></PRE>is
 * <P><PRE>&nbsp;&nbsp;&nbsp;&nbsp;<STRONG>[[[D
 * </STRONG></PRE>
 *
 * @author Legendi Richard Oliver
 * @version 1.0, 2005 nov 3.
 */
public class FieldInfo {


	// --- Structure -----------------------------------------------------------------------------

	private AccessFlags accessFlags;
	// u2
	private int nameIndex;
	// u2
	private int descriptorIndex;
	private Attributes fieldAttributes;
	private boolean isInterfaceField;

	// --- Constructors --------------------------------------------------------------------------

	/**
	 * This constructor reads the needed information from the given input, and creates the object.
	 *
	 * @param di an opened input (should be a <code>DataInputStream</code>, but can be exchanged
	 *			with any subclass).
	 * @throws CorruptedClassfileException if the classfile seems to be corrupted.
	 * @throws IOException if an I/O error occurs.
	 */
	public FieldInfo(DataInput di, boolean isInterfaceField) throws CorruptedClassfileException, IOException {
		accessFlags = new AccessFlags(di, AccessFlags.Type.FIELD, isInterfaceField);
		nameIndex = di.readUnsignedShort();
		descriptorIndex = di.readUnsignedShort();

		fieldAttributes = new Attributes(di);
		this.isInterfaceField = isInterfaceField;
	}

	// --- Getter methods -------------------------------------------------------------------------

	/** Tests if the field has a constant value. */
	public boolean hasConstantValue() {
		return fieldAttributes.hasConstantValue();
	}

	/** Tests if the field has the synthetic attribute. */
	public boolean hasSynthetic() {
		return fieldAttributes.hasSynthetic();
	}

	/** Tests if the field has any attributes. */
	public boolean hasAttributes() {
		return ( ! fieldAttributes.isEmpty() );
	}

	/** Returns <code>attributes_count</code>. */
	public int getAttributesCount() {
		return fieldAttributes.getAttributesCount();
	}

	/** Returns the field attributes. */
	public Attributes getAttributes() {
		return fieldAttributes;
	}

	/** Returns the access string (describing the access privileges). */
	public String getAccessString() {
		return accessFlags.getAccessString();
	}

	/** Returns the full access string. */
	public String getFullAccessString() {
		String afi = Integer.toHexString( accessFlags.getAccessInt() );
		String afs = accessFlags.getAccessString() + accessFlags.getRealModifierString();

		if ( afs.equals("") ) {
			afs = "N/A";
		}

		return  "0x" + afi + " [" + afs.trim() + "]";
	}

	/** Returns the full <i>real</i> access string. */
	public String getFullRealAccessString() {
		return accessFlags.getAccessInt() + " [" + accessFlags.getModifierString() + "]";
	}

	/** Returns the constant value as a string. */
	public String getConstantValueString() {
		return fieldAttributes.getConstantValueString();
	}

	/** Returns the descriptor of this field entry. */
	public String getDescriptorString() {
		return ConstantPool.getDescriptorString(descriptorIndex);
	}

	/** Returns the descriptor of the descriptor of this field entry. :-) */
	public String getFullDescriptorString() {
		return descriptorIndex + " [" + getDescriptorString() + "]";
	}

	/** Returns the name of this field entry. */
	public String getNameString() {
		return ConstantPool.getUtf8String(nameIndex);
	}

	/** Returns the descriptor of the name of this field entry. */
	public String getFullNameString() {
		return nameIndex + " [" + getNameString() + "]";
	}

	/**
	 * Returns the <i>real</i> modifier string of this field entry.
	 *
	 * @see jyzer.items.accessflags.AccessFlags
	 */
	public String getRealModifierString() {
		return accessFlags.getRealModifierString();
	}

	// --- Own methods -----------------------------------------------------------------------------

	/**
	 * Concatenates a HTML string that represents this class ( looks cool! ) to the end of
	 * the given <code>StringBiulder</code> object. Using this method for improve efficiency,
	 * cause I had a lot of problems with displaying such a long HTML text in an <code>EditorPane</code>.
	 *
	 * @param sb a <code>StringBuilder<code> that contains the string representation of the full classfile.
	 */
	public void getHTMLDescription(StringBuilder sb) {
		sb.append("Access Flags: ");
		accessFlags.getHTMLDescription(sb);
		sb.append("<BR>");

		sb.append("Name Index: ").append(nameIndex);
		sb.append(" <FONT color=\"blue\">// ").append( ConstantPool.getUtf8String(nameIndex) ).append("</FONT><BR>");

		sb.append("Descriptor Index: ").append(descriptorIndex);
		sb.append(" <FONT color=\"blue\">// ").append( ConstantPool.getDescriptorString(descriptorIndex) ).append("</FONT><BR>");
		fieldAttributes.getHTMLDescription(sb);
	}

	// --- Super methods ----------------------------------------------------------------------------

	/**
	 * For debugging reasons. I was intrested to overwrite this method.
	 *
	 * @return the string representation of this object.
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder();

		sb.append("Access Flags:     ").append(accessFlags).append("\n");
		sb.append("Name Index:       ").append(nameIndex).append("\n");
		sb.append("Descriptor Index: ").append(descriptorIndex).append("\n");
		sb.append(fieldAttributes);

		return sb.toString();
	}

}// class.FieldInfo
